{
  "name": "PCM",
  "scopeName": "source.pcm",
  "fileTypes": ["pcm"],
  "uuid": "19402ea7-7dd3-407c-adf3-e662cb7ca2c2",
  "patterns": [
    {
      "include": "#round-brackets"
    },
    {
      "name": "comment.line.double-slash.pcm",
      "match": "\/\/.*"
    },
    {
      "match": "\\b(if|then|else|endif|repeat|for|each|to|step|case|selectCase|caseElse|endSelect|until|next)\\b",
      "name": "keyword.control.pcm"
    },
    {
      "match": "\\b(bitAnd|bitOr|bitXor)\\b",
      "name": "keyword.operator.pcm"
    },
    {
      "match": "\\b(vector|point|calculatePointOnHelx)\\b",
      "name": "storage.type.pcm"
    },
    {
      "match": "\\b(list)\\b",
      "name": "support.class.collection.pcm"
    },
    {
      "match": "\\b(true|false)\\b",
      "name": "constant.language.pcm"
    },
    {
      "match": "\\b(asc|chr|format|inStr|len|mid|strElement|val|subStr|text|val|getNominal|getActual)\\b",
      "name": "support.function.pcm"
    },
    {
      "match": "\\b(squared|sqrt|exp|ln|log|mod|int|abs|round|sign|signWith-Zero|max|min|ord)\\b",
      "name": "support.function.math.pcm"
    },
    {
      "match": "\\b(rad|deg|angle|sin|sinRad|cos|cosRad|tan|tanRad|arcsin|arccos|radArccos|arctan|radArctan|arctan2)\\b",
      "name": "support.function.trig.pcm"
    },
    {
      "match": "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f)?\\b",
      "name": "constant.numeric.pcm"
    },
    {
      "match": "\\b(actuals|actualInspection|applicationData|defaultInspections|defaultResults|defaultResults|inspections|programFiles|protform|results|workarea)\\b",
      "name": "variable.parameter.pcm"
    },
    {
      "match": "\\*|\\/|\\+|-|==|<=|>=|<>|<|>",
      "name": "keyword.operator.pcm"
    },
    {
      "begin": "\"",
      "beginCaptures": [
        {
          "name": "punctuation.definition.string.begin.pcm"
        }
      ],
      "end": "\"",
      "endCaptures": [
        {
          "name": "punctuation.definition.string.end.pcm"
        }
      ],
      "name": "string.quoted.double.pcm",
      "patterns": [
        {
          "match": "\"\"",
          "name": "constant.character.escape.apostrophe.pcm"
        }
      ]
    }
  ],
  "repository": {
    "round-brackets": {
      "begin": "\\(",
      "end": "\\)",
      "beginCaptures": {
        "0": { "name": "punctuation.paren.open" }
      },
      "endCaptures": {
        "0": { "name": "punctuation.paren.close" }
      },
      "name": "meta.round-brackets",
      "patterns": [
        {
          "include": "source.pcm"
        }
      ]
    }
  }
}
